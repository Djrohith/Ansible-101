---
- name: create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ region }}"
    state: present
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: vpc


- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpc.vpc.id }}"


- name: associate subnet to the VPC
  ec2_vpc_subnet:
   state: present
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   cidr: "{{ subnet_cidr }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   map_public: yes
   resource_tags:
     Name: "{{ subnet_name }}"
  register: subnet

- name: create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
  register: igw


- name: Route IGW
  ec2_vpc_route_table:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   subnets:
     - "{{ subnet.subnet.id }}"
   routes:
     - dest: 0.0.0.0/0
       gateway_id: "{{ igw.gateway_id  }}"
   tags:
     Name: "{{ route_name }}"


- name: Create security group
  ec2_group:
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp  # ssh
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # http
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 9000
        to_port: 9000
        cidr_ip: 0.0.0.0/0
      - proto: tcp  # https
        from_port: 8081
        to_port: 8081
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: security_group

- name: create a new ec2 key pair, returns generated private key
  ec2_key:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ project_name }}-{{ demo }}-key"
    region: "{{ region }}"
  register: keypair
  tags:
   - ec2_key

- debug:
      var: keypair
  tags:
   - ec2_key

- name: Copy EC2 Key Pair private key locally
  copy: content="{{ keypair.key.private_key }}" dest="../aws-private.pem" mode=0600
  when: keypair.changed == true
  tags:
   - ec2_key


#- name: Create an EC2 key
#  ec2_key:
#    name: "{{ project_name }}-{{ env }}-key"
#    region: "{{ region }}"
#  register: ec2_key

#- name: Save private key
#  copy: content="{{ ec2_key.key.private_key }}" dest="../aws-private.pem" mode=0600
#  when: ec2_key.changed

- name: Create an EC2 instance jenkins
  ec2:
    key_name: "{{ project_name }}-{{ demo }}-key"
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    wait: yes
    instance_tags: '{"Name":"{{ec2_tag_Name1}}","Type":"{{ec2_tag_Type1}}"}'
    count_tag: '{"Name":"{{ec2_tag_Name1}}","Type":"{{ec2_tag_Type1}}"}'
    count_tag: env
    exact_count: 1
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    assign_public_ip: yes
    private_ip: 10.0.1.17
  register: ec2
- debug: var=item
  with_items: "{{ ec2.instances }}"

- name: Add the newly created EC2 instance(s) to host group jenkins
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }}
              insertafter='\[jenkins_server\]'
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ ec2.instances }}"

- wait_for: path={{ hostpath }} search_regex={{hoststring}}



- name: Create an EC2 instance sonar server
  ec2:
    key_name: "{{ project_name }}-{{ demo }}-key"
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    wait: yes
    instance_tags: '{"Name":"{{ec2_tag_Name2}}","Type":"{{ec2_tag_Type2}}"}'
    count_tag: '{"Name":"{{ec2_tag_Name2}}","Type":"{{ec2_tag_Type2}}"}'
    exact_count: 1
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    assign_public_ip: yes
    private_ip: 10.0.1.19
  register: ec2


- name: Add the newly created EC2 instance(s) to host group sonar
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }}
              insertafter='\[sonar_server\]'
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ ec2.instances }}"


- wait_for: path={{ hostpath }} search_regex={{hoststring}}



#- name: Create an EC2 instance nexus server
#  ec2:
#    key_name: "{{ project_name }}-{{ demo }}-key"
#    region: "{{ region }}"
#    group_id: "{{ security_group.group_id }}"
#    instance_type: "{{ instance_type }}"
#    image: "{{ ami }}"
#    wait: yes
#    instance_tags: '{"Name":"{{ec2_tag_Name2}}","Type":"{{ec2_tag_Type2}}"}'
#    count_tag: '{"Name":"{{ec2_tag_Name2}}","Type":"{{ec2_tag_Type2}}"}'
#    exact_count: 1
#    vpc_subnet_id: "{{ subnet.subnet.id }}"
#    assign_public_ip: yes
#    private_ip: 10.0.1.20
#  register: ec2


- name: Add the newly created EC2 instance(s) to host group nexus_server
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }}
              insertafter='\[nexus_server\]'
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ ec2.instances }}"

- wait_for: path={{ hostpath }} search_regex={{hoststring}}


- name: Create an EC2 instance appserver
  ec2:
    key_name: "{{ project_name }}-{{ demo }}-key"
    region: "{{ region }}"
    group_id: "{{ security_group.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    wait: yes
    instance_tags: '{"Name":"{{ec2_tag_Name3}}","Type":"{{ec2_tag_Type3}}"}'
    count_tag: '{"Name":"{{ec2_tag_Name3}}","Type":"{{ec2_tag_Type3}}"}'
    exact_count: 1
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    assign_public_ip: yes
    private_ip: 10.0.1.21
  register: ec2

- name: Add the newly created EC2 instance(s) to host group appserver
  lineinfile: dest={{ hostpath }}
              regexp={{ item.public_ip }}
              insertafter='\[app_server\]'
              line="{{ item.public_ip }} {{hoststring}}"
              state=present
  with_items: "{{ ec2.instances }}"


- wait_for: path={{ hostpath }} search_regex={{hoststring}}

- name: Wait for SSH to come up
  local_action: wait_for 
                host={{ item.public_ip }} 
                port=22 
                state=started
  with_items: "{{ ec2.instances }}"

- name: Add IP to ec2_hosts group
  add_host: hostname={{ item.public_ip }} groups=ec2_hosts
  with_items: "{{ ec2.instances }}"


#- name: ping all hosts
#  hosts: all
#  tasks:
#   - name: ping
#     action: ping

#- include: ansible-playbook -i /root/Ansible-Automation/hosts /root/Ansible-Automation/vagrant-alm/ansible/alm.yml --extra-vars ansible_ssh_user=centos
